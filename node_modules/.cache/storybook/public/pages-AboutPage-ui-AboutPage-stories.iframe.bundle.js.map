{"version":3,"file":"pages-AboutPage-ui-AboutPage-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AASA;AAEA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AAEA;AAGA;AAEA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAAA;AAGA;AASA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAGA;AAnBA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAAA;AAMA;AAEA;AAAA;AAEA;AACA;AACA;AAGA;AATA;AAaA;;;;;;;;;;;;;;;;AClBA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA","sources":["webpack://production-project/./src/app/providers/ThemeProvider/index.tsx","webpack://production-project/./src/app/providers/ThemeProvider/lib/ThemeContext.ts","webpack://production-project/./src/app/providers/ThemeProvider/lib/useTheme.ts","webpack://production-project/./src/app/providers/ThemeProvider/ui/ThemeProvider.tsx","webpack://production-project/./src/pages/AboutPage/ui/AboutPage.tsx","webpack://production-project/./src/shared/config/ThemeDecorator/ThemeDecorator.tsx"],"sourcesContent":["import ThemeProvider from \"./ui/ThemeProvider\";\nimport { useTheme } from \"./lib/useTheme\";\n\n\nexport {ThemeProvider, useTheme}","import {createContext} from \"react\";\n\nexport enum Theme {\n    LIGHT = 'app_light_theme',\n    DARK = 'app_dark_theme'\n}\n\nexport interface ThemeContextProps {\n    theme?: Theme;\n    setTheme?: (theme: Theme) => void\n}\n\nexport const ThemeContext = createContext<ThemeContextProps>({})\n\nexport const LOCAL_STORAGE_THEME_KEY = 'theme';\n","import { LOCAL_STORAGE_THEME_KEY, Theme } from \"./ThemeContext\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"./ThemeContext\";\n\n\n\ninterface UseThemeResult {\n    toggleTheme: () => void;\n    theme: Theme;\n}\n\nexport function useTheme(): UseThemeResult {\n\n    const {theme, setTheme} = useContext(ThemeContext)\n\n\n\n    const toggleTheme = () => {\n        const newTheme = theme === Theme.DARK? Theme.LIGHT : Theme.DARK\n        \n\n\tdocument.body.className = newTheme\n\tlocalStorage.setItem(LOCAL_STORAGE_THEME_KEY, newTheme)\n        \n        setTheme(newTheme)\n\n\n    }\n\n    return {theme, \n            toggleTheme,\n        }\n\n}\n","import React, {FC, PropsWithChildren, useMemo, useState} from 'react';\nimport {LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext} from '../lib/ThemeContext';\n\n\nconst defaultTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme || Theme.LIGHT;\n\n\ninterface ThemeProviderProps{\n\tinitialTheme?: Theme;\n\tchildren?: any;\n}\n\n\nconst ThemeProvider: FC<ThemeProviderProps> = (props) => {\n   \n   const {initialTheme, children}=props\n\n\n    const [theme, setTheme] = useState<Theme>(initialTheme||defaultTheme);\n\n\n\n    const defaultProps = useMemo(() => ({\n        theme,\n        setTheme,\n    }), [theme])\n\n    return (\n        <ThemeContext.Provider value={defaultProps}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n\nexport default ThemeProvider;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageLoader } from '../../../widgets/PageLoader';\n\n\n\n\nconst AboutPage = () => {\n\n    const {t} = useTranslation('about')\n\n    return (\n        <div>\n            {t('О сайте')}\n        </div>\n    )\n}\n\n\n\nexport default AboutPage;","import { Story } from \"@storybook/react\";\nimport { Theme } from \"../../../app/providers/ThemeProvider/lib/ThemeContext\";\nimport { ThemeProvider } from \"../../../app/providers/ThemeProvider\";\n\n\n const ThemeDecorator = (theme:Theme) =>(StoryComponent:Story) => (\n   <ThemeProvider initialTheme={theme}> \n       <div className={`app ${theme}`}>\n            <StoryComponent></StoryComponent>\n       </div>\n   </ThemeProvider>\n)\n\n\n\nexport default ThemeDecorator\n"],"names":[],"sourceRoot":""}